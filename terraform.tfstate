{
  "version": 4,
  "terraform_version": "1.11.4",
  "serial": 28,
  "lineage": "fa270a5d-716e-7c18-949a-5b63f48a541e",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "checkly_alert_channel",
      "name": "email-253278",
      "provider": "provider[\"registry.terraform.io/checkly/checkly\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "call": [],
            "email": [
              {
                "address": "contato@nataliagranato.xyz"
              }
            ],
            "id": "253329",
            "opsgenie": [],
            "pagerduty": [],
            "send_degraded": false,
            "send_failure": true,
            "send_recovery": true,
            "slack": [],
            "sms": [],
            "ssl_expiry": false,
            "ssl_expiry_threshold": 30,
            "webhook": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "checkly_check",
      "name": "https-nataliagranato-xyz",
      "provider": "provider[\"registry.terraform.io/checkly/checkly\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "activated": true,
            "alert_channel_subscription": [],
            "alert_settings": [
              {
                "escalation_type": "RUN_BASED",
                "parallel_run_failure_threshold": [
                  {
                    "enabled": false,
                    "percentage": 10
                  }
                ],
                "reminders": [
                  {
                    "amount": 0,
                    "interval": 5
                  }
                ],
                "run_based_escalation": [
                  {
                    "failed_run_threshold": 2
                  }
                ],
                "ssl_certificates": [],
                "time_based_escalation": []
              }
            ],
            "degraded_response_time": 15000,
            "double_check": false,
            "environment_variable": [],
            "environment_variables": {},
            "frequency": 5,
            "frequency_offset": null,
            "group_id": 0,
            "group_order": 0,
            "id": "9ec12f1f-b1cd-4031-99af-a7c3b44940ce",
            "local_setup_script": "",
            "local_teardown_script": "",
            "locations": [
              "af-south-1",
              "sa-east-1"
            ],
            "max_response_time": 30000,
            "muted": false,
            "name": "https://www.nataliagranato.xyz",
            "private_locations": [],
            "request": [],
            "retry_strategy": [
              {
                "base_backoff_seconds": 120,
                "max_duration_seconds": 600,
                "max_retries": 3,
                "same_region": true,
                "type": "LINEAR"
              }
            ],
            "run_parallel": true,
            "runtime_id": null,
            "script": "import { test, expect } from '@playwright/test';\n\n// Configuração com tempos de espera aumentados para todo o teste\ntest.setTimeout(90000); // 90 segundos de timeout para o teste inteiro\n\ntest('Verificar site nataliagranato.xyz', async ({ page }) =\u003e {\n    console.log('Iniciando teste do site nataliagranato.xyz');\n\n    // Aumenta o timeout da navegação para 60 segundos\n    await page.goto('https://www.nataliagranato.xyz', {\n        timeout: 60000,\n        waitUntil: 'networkidle' // Espera até que não haja mais requisições de rede\n    });\n\n    console.log('Página carregada, verificando URL...');\n\n    // Verifica se a URL está correta\n    await expect(page).toHaveURL(/.*nataliagranato\\.xyz.*/, { timeout: 30000 });\n\n    // Obtém e exibe o título da página para diagnóstico\n    const title = await page.title();\n    console.log(`Título da página: ${title}`);\n\n    // Verifica se elementos essenciais da página estão presentes\n    console.log('Verificando elementos da página...');\n    await expect(page.locator('body')).toBeVisible({ timeout: 30000 });\n\n    // Verifica se o conteúdo principal foi carregado (ajuste o seletor conforme necessário)\n    // Por exemplo, verificando se há um elemento de cabeçalho ou conteúdo principal\n    try {\n        // Tenta localizar headers, main content ou outros elementos importantes\n        const mainContent = await page.$('header, main, #content, .main-content');\n        console.log('Conteúdo principal encontrado:', !!mainContent);\n    } catch (e) {\n        console.log('Erro ao verificar conteúdo principal:', e);\n    }\n\n    // Captura screenshot para análise posterior\n    await page.screenshot({ path: 'screenshot.png', fullPage: true });\n\n    console.log('Teste concluído com sucesso!');\n});",
            "setup_snippet_id": 0,
            "should_fail": false,
            "ssl_check": null,
            "ssl_check_domain": "",
            "tags": [],
            "teardown_snippet_id": 0,
            "type": "BROWSER",
            "use_global_alert_settings": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ],
  "check_results": null
}
